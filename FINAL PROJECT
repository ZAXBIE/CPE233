.data
.eqv LEDS, 0x11080000 # Stored in x29, do not change that register
.eqv SSEG, 0x110c0000 # Stored in x30, do not change that register
.eqv SWITCHES, 0x11000000 #Stored in x28, do not change that register
.eqv RANDOM, 0x11040000 #Stored in x27, do not change that register
.text
RESET:
li x27, RANDOM
li x28, SWITCHES
li x29, LEDS
li x30, SSEG
la x31, MY_ISR #store address of isr, do not change register 31
sw x0, 0(x30)
sw x0, (x29)
csrw x31, 0x305 # mtvec, isr
li x21, 0
main_loop:
li x19, 1
csrw x19, 772 # mie
li x3, 3111116  # num for delay being stored in x3
call delay
srli x21, x21, 1  #shift LED value right
bnez x21, reset_led  # if leds are zero, reset LED
li x21, 0x8000  #Initializes first LED if it is zero
reset_led:
sw x21, 0(x29) #Display new LED value
j main_loop



MY_ISR: #x21 is the read-in LED value, go to respective game
li x12, 1 # game value to check against, set to lowest first
beq x21, x12, GAME1 #go to game1 if LED is in position 0
slli x12, x12, 1 #shift "check" bit over to position 1
beq x21, x12, GAME2
slli x12, x12, 1
beq x21, x12, GAME3
slli x12, x12, 1
beq x21, x12, GAME4
slli x12, x12, 1
beq x21, x12, GAME5
slli x12, x12, 1
beq x21, x12, GAME6
slli x12, x12, 1
beq x21, x12, GAME7
slli x12, x12, 1
beq x21, x12, GAME8
slli x12, x12, 1
beq x21, x12, GAME9
slli x12, x12, 1
beq x21, x12, GAME10
slli x12, x12, 1
beq x21, x12, GAME11
slli x12, x12, 1
beq x21, x12, GAME12
slli x12, x12, 1
beq x21, x12, GAME13
slli x12, x12, 1
beq x21, x12, GAME14
slli x12, x12, 1
beq x21, x12, GAME15
slli x12, x12, 1 # "check" is in position 15
beq x21, x12, GAME16



GAME1:
#insert code here
li x13, 1
sw x13, 0(x30)
mret 
GAME2:
#insert code here
li x13, 2
sw x13, 0(x30)
mret 
GAME3:
#insert code here
li x13, 3
sw x13, 0(x30)
mret 
GAME4:
#insert code here
li x13, 4
sw x13, 0(x30)
mret 
GAME5:
# Game 5 - The Draw
li x8, 0x8000 # left switch target
li x9, 0x1 # right switch target
li x5, 0xFFFF # value for LEDs on
li x11, 0 # left score
li x12, 0 # right score
sw x0, 0(x30) # set SSEG to zero
MAIN_5:
sw x0, 0(x29) # turn off LEDS
lw x4, 0(x27) # get the random and load into x4 for future usage
addi x4, x4, 1 # add 1 so it is in the range of 1-16
li x3, 0
li x17, 0
li x16, 5000000
MULTIPLY_5: # Add x16 to x3 x4 times
add x3, x3, x16
addi x17, x17, 1
bne x17, x4, MULTIPLY_5
call delay
sw x5, 0(x29) # turn on LEDS

LOOP: #sense who flipped first
lw x6, 0(x28) # get value from switches
beq x6, x8, LEFTWIN # if leftmost switch went up first
beq x6, x9, RIGHTWIN # if rightmost switch went up first
j LOOP

LEFTWIN:
addi x12, x12, 1000 #inc score for left
add x13, x12, x11 #add scores into one int
sw x13, 0(x30) # display score
li x3, 1000000 # (1sec)
call delay
li x18, 5000
and x14, x12, x18 #check if left side hit 5 points first
li x5, 0xFF00
beq x12, x18, END_5
LEFTWAIT: # wait for all switches to be put down
lw x6, 0(x28) #get switch val
bnez x6, LEFTWAIT
li x5, 0xFFFF
j MAIN_5 

RIGHTWIN:
addi x11, x11, 1 #inc score for right
add x13, x12, x11
sw x13, 0(x30) # display score
li x3, 1000000 # (1sec)
call delay
li x18, 5
and x14, x11, x18 #check if right side hit 5 points first
li x5, 0x00FF
beq x14, x18, END_5
RIGHTWAIT: # wait for all switches to be put down
lw x6, 0(x28) #get switch val
bnez x6, RIGHTWAIT
li x5, 0xFFFF
j MAIN_5

END_5:
sw x5, 0(x29) #turn on LEDS
li x3, 4000000 #(.4 sec)
call delay
li x17, 0 #load in 0
sw x17, 0(x29) #turn of LEDS
call delay
lw x6, 0(x28) #get val from switches
bnez x6, END_5 # keep blinking LEDS until all switches are off
sw x0, 0(x30)
mret #exit

GAME6:
#insert code here
li x13, 6
sw x13, 0(x30)
mret 
GAME7:
#insert code here
li x13, 7
sw x13, 0(x30)
mret 
GAME8:
#insert code here
li x13, 8
sw x13, 0(x30)
mret 
GAME9:
#insert code here
li x13, 9
sw x13, 0(x30)
mret 
GAME10:
#insert code here
li x13, 10
sw x13, 0(x30)
mret 
GAME11:
#insert code here
li x13, 11
sw x13, 0(x30)
mret 
GAME12:
#insert code here
li x13, 12
sw x13, 0(x30)
mret 
GAME13:
# Whack A Mole
sw x0, 0(x30) # set SSEG to 0
li x5, 0 # score
li x10, 10 # score to reach
MAIN_13:
sw x0, 0(x29) # turn off LEDS
li x10, 10
lw x4, 0(x27) # get the random and load into x4 for future usage
addi x4, x4, 1
li x3, 0
li x17, 0
li x16, 5000000
MULTIPLY_13: #creates a random time interval by multiplying a large number by a random
add x3, x3, x16
addi x17, x17, 1
bne x17, x4, MULTIPLY_13
call delay
bge x5, x10, RESET # Check if score is greater than 10 (soft reset for debugging)
lw x4, 0(x27) # Get the random value
li x6, 1
sll x6, x6, x4
sw x6, 0(x29) # set a random LED high
li x15, 0 # initialize counter
CHECK_SWITCH_LOOP_13:
lw x7, 0(x28) # load switches
and x7, x7, x6 #bitmask switches with current led value
addi x15, x15, 1 #set counter higher
bge x15, x16, MAIN_13 # if counter is large enough, quit out and jump back
bne x7, x6, CHECK_SWITCH_LOOP_13 # if switches and leds are not the same, jump back
addi x5, x5, 1 # increase score
sw x5, 0(x30) # store score to SSEG
LOOP_13: # Wait for switches to go to zero
lw x7, 0(x28)
bnez x7, LOOP_13
blt x5, x10, MAIN_13
sw x0, 0(x29)
FINAL_LOOP_13: # Wait for switches to go to zero
lw x7, 0(x28)
bnez x7, FINAL_LOOP_13
sw x0 0(x30)
mret 
GAME14:
#insert code here
li x13, 14
sw x13, 0(x30)
mret 
GAME15:
#insert code here
li x13, 15
sw x13, 0(x30)
mret 
GAME16:
#insert code here
li x13, 16
sw x13, 0(x30)
mret 

delay:                               # @delay(int num) num = 50E6 * t (t is time in seconds)
        li x4, 0
del_loop:        
        addi x4, x4, 1
        bne x4, x3, del_loop
        ret
